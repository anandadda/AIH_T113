# -*- coding: utf-8 -*-
"""model_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14STn--56i5vgTQHjBdI3KQ2vZq8gscpU
"""

from google.colab import drive
drive.mount('/content/drive')

ls

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import tensorflow.keras as keras

x=np.load('/content/drive/My Drive/CDAC/x_dat.npy')

y=np.load('/content/drive/My Drive/CDAC/y_dat.npy')

x.shape

y.shape

num_classes=y.max()+1

import random

data=list(zip(x,y))
random.shuffle(data)

X_dat=np.array([i for i,j in data])
Y_dat=np.array([j for i,j in data])

ny=np.zeros((Y_dat.shape[0],num_classes))

for i in range(Y_dat.shape[0]):
  ny[i,Y_dat[i]]=1

X_train=X_dat[:18000]
Y_train=ny[:18000]

X_test=X_dat[18000:]
Y_test=ny[18000:]

model= keras.models.load_model('/content/drive/My Drive/CDAC/weights.h5')

model.summary()

from keras.layers import Dense, Activation, Flatten
from keras.layers import merge, Input

import sklearn as sk

temp_mod=keras.models.Model(inputs=model.inputs,outputs=model.layers[-3].output)

temp_mod.summary()

for layer in temp_mod.layers:
  layer.trainable = False

temp_mod.summary()

model=keras.models.Sequential()

model.add(temp_mod)

model.summary()

model.add(keras.layers.Dense(256,activation='relu'))

model.add(keras.layers.Dropout(0.75))

model.add(keras.layers.Dense(num_classes,activation='softmax'))

model.summary()

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(X_train,Y_train,batch_size=32,epochs=10,validation_split=0.1)

model.evaluate(X_test,Y_test)

ls

model.save('vgg_modified.h5')

